{"remainingRequest":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\thread-loader\\dist\\cjs.js!F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\babel-loader\\lib\\index.js!F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\eslint-loader\\index.js??ref--12-0!F:\\RS\\Repositaries\\RS-Lang\\rslang\\src\\store\\user.js","dependencies":[{"path":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\src\\store\\user.js","mtime":1594449920416},{"path":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkY6L1JTL1JlcG9zaXRhcmllcy9SUy1MYW5nL3JzbGFuZy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7Ci8qKiBJbnN0cnVjdGlvbnMgZm9yIHdvcmtpbmcgd2l0aCBhY3Rpb25zDQogKiBsaW5rIGh0dHBzOi8vdnVleC52dWVqcy5vcmcvYXBpLyNhY3Rpb25zDQogKi8KCnZhciBhY3Rpb25zID0gewogIFVTRVJfUkVRVUVTVDogZnVuY3Rpb24gVVNFUl9SRVFVRVNUKF9yZWYsIHVzZXJJZCkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgdmFyIHN0YXRlLCByb290U3RhdGUsIGNvbW1pdCwgZGlzcGF0Y2gsIHVzZXJEYXRhOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlLCByb290U3RhdGUgPSBfcmVmLnJvb3RTdGF0ZSwgY29tbWl0ID0gX3JlZi5jb21taXQsIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaDsKICAgICAgICAgICAgICBjb21taXQoJ1VTRVJfUkVRVUVTVCcpOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoIiIuY29uY2F0KHJvb3RTdGF0ZS5hcHAuc2VydmVyLCAiL3VzZXJzLyIpLmNvbmNhdCh1c2VySWQgfHwgc3RhdGUucHJvZmlsZS51c2VySWQpKS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIGNvbW1pdCgnVVNFUl9FUlJPUicpOwogICAgICAgICAgICAgICAgZGlzcGF0Y2goJ0FMRVJUJywgewogICAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcicsCiAgICAgICAgICAgICAgICAgIGRhdGE6IGVycm9yLnJlc3BvbnNlLmRhdGEKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgcm9vdDogdHJ1ZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgdXNlckRhdGEgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfQn9C+0LvRg9GH0LjQuyDQtNCw0L3QvdGL0LUg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPJywgdXNlckRhdGEuZGF0YSk7CiAgICAgICAgICAgICAgY29tbWl0KCdVU0VSX0RBVEEnLCB1c2VyRGF0YS5kYXRhKTsKICAgICAgICAgICAgICBjb21taXQoJ1VTRVJfU1VDQ0VTUycpOwoKICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKSgpOwogIH0sCiAgVVNFUl9VUERBVEVfRU1BSUxfUEFTU1dPUkQ6IGZ1bmN0aW9uIFVTRVJfVVBEQVRFX0VNQUlMX1BBU1NXT1JEKF9yZWYyKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgdmFyIHN0YXRlLCByb290U3RhdGUsIGNvbW1pdCwgZGlzcGF0Y2gsIGRhdGE7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmMi5zdGF0ZSwgcm9vdFN0YXRlID0gX3JlZjIucm9vdFN0YXRlLCBjb21taXQgPSBfcmVmMi5jb21taXQsIGRpc3BhdGNoID0gX3JlZjIuZGlzcGF0Y2g7CiAgICAgICAgICAgICAgZGF0YSA9IHsKICAgICAgICAgICAgICAgIGVtYWlsOiBzdGF0ZS5wcm9maWxlLmVtYWlsLAogICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHN0YXRlLnByb2ZpbGUucGFzc3dvcmQKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGNvbW1pdCgnVVNFUl9SRVFVRVNUJyk7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA1OwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5wdXQoIiIuY29uY2F0KHJvb3RTdGF0ZS5hcHAuc2VydmVyLCAiL3VzZXJzLyIpLmNvbmNhdChzdGF0ZS5wcm9maWxlLnVzZXJJZCksIGRhdGEpLnRoZW4oZnVuY3Rpb24gKHVzZXJEYXRhKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn0J7QsdC90L7QstC40Lsg0LTQsNC90L3Ri9C1INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjycsIHVzZXJEYXRhLmRhdGEpOwogICAgICAgICAgICAgICAgY29tbWl0KCdVU0VSX0RBVEEnLCB1c2VyRGF0YS5kYXRhKTsKICAgICAgICAgICAgICAgIGNvbW1pdCgnVVNFUl9TVUNDRVNTJyk7CiAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgICBjb21taXQoJ1VTRVJfRVJST1InKTsKICAgICAgICAgICAgICAgIGRpc3BhdGNoKCdBTEVSVCcsIHsKICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnZXJyb3InLAogICAgICAgICAgICAgICAgICBkYXRhOiBlcnJvci5yZXNwb25zZS5kYXRhCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgIHJvb3Q6IHRydWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIpOwogICAgfSkpKCk7CiAgfSwKICBVU0VSX0RFTEVURTogZnVuY3Rpb24gVVNFUl9ERUxFVEUoX3JlZjMpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICB2YXIgc3RhdGUsIHJvb3RTdGF0ZSwgY29tbWl0LCBkaXNwYXRjaDsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBzdGF0ZSA9IF9yZWYzLnN0YXRlLCByb290U3RhdGUgPSBfcmVmMy5yb290U3RhdGUsIGNvbW1pdCA9IF9yZWYzLmNvbW1pdCwgZGlzcGF0Y2ggPSBfcmVmMy5kaXNwYXRjaDsKICAgICAgICAgICAgICBjb21taXQoJ1VTRVJfUkVRVUVTVCcpOwogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZGVsZXRlKCIiLmNvbmNhdChyb290U3RhdGUuYXBwLnNlcnZlciwgIi91c2Vycy8iKS5jb25jYXQoc3RhdGUucHJvZmlsZS51c2VySWQpKS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIGNvbW1pdCgnVVNFUl9FUlJPUicpOwogICAgICAgICAgICAgICAgZGlzcGF0Y2goJ0FMRVJUJywgewogICAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcicsCiAgICAgICAgICAgICAgICAgIGRhdGE6IGVycm9yLnJlc3BvbnNlLmRhdGEKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgcm9vdDogdHJ1ZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY29tbWl0KCdVU0VSX0xPR09VVCcpOwogICAgICAgICAgICAgIGNvbW1pdCgnVVNFUl9TVUNDRVNTJyk7CiAgICAgICAgICAgICAgZGlzcGF0Y2goJ0FVVEhfTE9HT1VUJywgbnVsbCwgewogICAgICAgICAgICAgICAgcm9vdDogdHJ1ZQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGRpc3BhdGNoKCdBTEVSVCcsIHsKICAgICAgICAgICAgICAgIHN0YXR1czogJ2luZm8nLAogICAgICAgICAgICAgICAgbWVzc2FnZTogJ1lvdXIgcHJvZmlsZSB3YXMgc3VjY2Vzc2Z1bGx5IGRlbGV0ZWQhJwogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHJvb3Q6IHRydWUKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUzKTsKICAgIH0pKSgpOwogIH0sCiAgVVNFUl9TSUdOVVA6IGZ1bmN0aW9uIFVTRVJfU0lHTlVQKF9yZWY0KSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgdmFyIHN0YXRlLCByb290U3RhdGUsIGNvbW1pdCwgZGlzcGF0Y2gsIHVzZXI7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmNC5zdGF0ZSwgcm9vdFN0YXRlID0gX3JlZjQucm9vdFN0YXRlLCBjb21taXQgPSBfcmVmNC5jb21taXQsIGRpc3BhdGNoID0gX3JlZjQuZGlzcGF0Y2g7CiAgICAgICAgICAgICAgY29tbWl0KCdVU0VSX1JFUVVFU1QnKTsKICAgICAgICAgICAgICB1c2VyID0gewogICAgICAgICAgICAgICAgZW1haWw6IHN0YXRlLnByb2ZpbGUuZW1haWwsCiAgICAgICAgICAgICAgICBwYXNzd29yZDogc3RhdGUucHJvZmlsZS5wYXNzd29yZAogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA1OwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5wb3N0KCIiLmNvbmNhdChyb290U3RhdGUuYXBwLnNlcnZlciwgIi91c2VycyIpLCB1c2VyKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgY29tbWl0KCdVU0VSX0RBVEEnLCByZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICAgIGRpc3BhdGNoKCdBVVRIX1JFUVVFU1QnLCB1c2VyLCB7CiAgICAgICAgICAgICAgICAgIHJvb3Q6IHRydWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgY29tbWl0KCdVU0VSX1NVQ0NFU1MnKTsKICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIGNvbW1pdCgnVVNFUl9FUlJPUicpOwogICAgICAgICAgICAgICAgZGlzcGF0Y2goJ0FMRVJUJywgewogICAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcicsCiAgICAgICAgICAgICAgICAgIGRhdGE6IGVycm9yLnJlc3BvbnNlLmRhdGEKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgcm9vdDogdHJ1ZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlNCk7CiAgICB9KSkoKTsKICB9LAoKICAvKioNCiAgICogRnVuY3Rpb24gZm9yIGdldHRpbmcvdXBkYXRpbmcgc3RhdGlzdGljcw0KICAgKg0KICAgKiBAcGFyYW0ge29iamVjdH0gW3BheWxvYWRdDQogICAqIEBwYXJhbSB7c3RyaW5nfSBbcGF5bG9hZC5tZXRob2Q9Z2V0XQ0KICAgKiBAZXhhbXBsZSBkaXNwYXRjaCgndXNlci9VU0VSX0dFVF9TRVRfU1RBVElTVElDUycsIHsgcm9vdDogdHJ1ZSB9KQ0KICAgKi8KICBVU0VSX0dFVF9TRVRfU1RBVElTVElDUzogZnVuY3Rpb24gVVNFUl9HRVRfU0VUX1NUQVRJU1RJQ1MoX3JlZjUsIHBheWxvYWQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KCkgewogICAgICB2YXIgc3RhdGUsIHJvb3RTdGF0ZSwgY29tbWl0LCBkaXNwYXRjaCwgbWV0aG9kOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIHN0YXRlID0gX3JlZjUuc3RhdGUsIHJvb3RTdGF0ZSA9IF9yZWY1LnJvb3RTdGF0ZSwgY29tbWl0ID0gX3JlZjUuY29tbWl0LCBkaXNwYXRjaCA9IF9yZWY1LmRpc3BhdGNoOwogICAgICAgICAgICAgIGNvbW1pdCgnVVNFUl9SRVFVRVNUJywgJ2xvYWRpbmcnKTsKICAgICAgICAgICAgICBtZXRob2QgPSBwYXlsb2FkICYmIHBheWxvYWQubWV0aG9kID8gcGF5bG9hZC5tZXRob2QgOiAnZ2V0JzsKICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDU7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zW21ldGhvZF0oIiIuY29uY2F0KHJvb3RTdGF0ZS5hcHAuc2VydmVyLCAiL3VzZXJzLyIpLmNvbmNhdChzdGF0ZS5wcm9maWxlLnVzZXJJZCwgIi9zdGF0aXN0aWNzIiksIG1ldGhvZCA9PT0gJ3B1dCcgPyBzdGF0ZS5zdGF0aXN0aWNzIDogbnVsbCkudGhlbihmdW5jdGlvbiAoc3RhdGlzdGljcykgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coc3RhdGlzdGljcy5kYXRhKTsKICAgICAgICAgICAgICAgIGNvbW1pdCgnVVNFUl9TVEFUSVNUSUNTJywgc3RhdGlzdGljcy5kYXRhKTsKICAgICAgICAgICAgICAgIGNvbW1pdCgnVVNFUl9TVUNDRVNTJyk7CiAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgICBjb21taXQoJ1VTRVJfRVJST1InLCAnZXJyb3InKTsKICAgICAgICAgICAgICAgIGRpc3BhdGNoKCdBTEVSVCcsIHsKICAgICAgICAgICAgICAgICAgYWxlcnQ6IHRydWUsCiAgICAgICAgICAgICAgICAgIHN0YXR1czogJ2Vycm9yJywKICAgICAgICAgICAgICAgICAgbWVzc2FnZTogIiIuY29uY2F0KGVycm9yLnJlc3BvbnNlLnN0YXR1c1RleHQsICI6ICIpLmNvbmNhdChlcnJvci5yZXNwb25zZS5kYXRhKQogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICByb290OiB0cnVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWU1KTsKICAgIH0pKSgpOwogIH0sCgogIC8qKg0KICAgKiBGdW5jdGlvbiBmb3IgZ2V0dGluZy91cGRhdGluZyBzZXR0aW5ncw0KICAgKg0KICAgKiBAcGFyYW0ge29iamVjdH0gW3BheWxvYWRdDQogICAqIEBwYXJhbSB7c3RyaW5nfSBbcGF5bG9hZC5tZXRob2Q9Z2V0XQ0KICAgKiBAZXhhbXBsZSBkaXNwYXRjaCgndXNlci9VU0VSX0dFVF9TRVRfU1RBVElTVElDUycsIHsgcm9vdDogdHJ1ZSB9KQ0KICAgKi8KICBVU0VSX0dFVF9TRVRfU0VUVElOR1M6IGZ1bmN0aW9uIFVTRVJfR0VUX1NFVF9TRVRUSU5HUyhfcmVmNiwgcGF5bG9hZCkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoKSB7CiAgICAgIHZhciBzdGF0ZSwgcm9vdFN0YXRlLCBjb21taXQsIGRpc3BhdGNoLCBtZXRob2Q7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNiQoX2NvbnRleHQ2KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmNi5zdGF0ZSwgcm9vdFN0YXRlID0gX3JlZjYucm9vdFN0YXRlLCBjb21taXQgPSBfcmVmNi5jb21taXQsIGRpc3BhdGNoID0gX3JlZjYuZGlzcGF0Y2g7CiAgICAgICAgICAgICAgY29tbWl0KCdVU0VSX1JFUVVFU1QnLCAnbG9hZGluZycpOwogICAgICAgICAgICAgIG1ldGhvZCA9IHBheWxvYWQgJiYgcGF5bG9hZC5tZXRob2QgPyBwYXlsb2FkLm1ldGhvZCA6ICdnZXQnOwogICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNTsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3NbbWV0aG9kXSgiIi5jb25jYXQocm9vdFN0YXRlLmFwcC5zZXJ2ZXIsICIvdXNlcnMvIikuY29uY2F0KHN0YXRlLnByb2ZpbGUudXNlcklkLCAiL3NldHRpbmdzIiksIG1ldGhvZCA9PT0gJ3B1dCcgPyBzdGF0ZS5zZXR0aW5ncyA6IG51bGwpLnRoZW4oZnVuY3Rpb24gKHNldHRpbmdzKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzZXR0aW5ncy5kYXRhKTsKICAgICAgICAgICAgICAgIGNvbW1pdCgnVVNFUl9TRVRUSU5HUycsIHNldHRpbmdzLmRhdGEpOwogICAgICAgICAgICAgICAgY29tbWl0KCdVU0VSX1NVQ0NFU1MnKTsKICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIGNvbW1pdCgnVVNFUl9FUlJPUicsICdlcnJvcicpOwogICAgICAgICAgICAgICAgZGlzcGF0Y2goJ0FMRVJUJywgewogICAgICAgICAgICAgICAgICBhbGVydDogdHJ1ZSwKICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnZXJyb3InLAogICAgICAgICAgICAgICAgICBtZXNzYWdlOiAiIi5jb25jYXQoZXJyb3IucmVzcG9uc2Uuc3RhdHVzVGV4dCwgIjogIikuY29uY2F0KGVycm9yLnJlc3BvbnNlLmRhdGEpCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgIHJvb3Q6IHRydWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTYpOwogICAgfSkpKCk7CiAgfQp9OwovKioNCiAqIEluc3RydWN0aW9ucyBmb3Igd29ya2luZyB3aXRoIG11dGF0aW9ucw0KICogbGluayBodHRwczovL3Z1ZXgudnVlanMub3JnL2d1aWRlL211dGF0aW9ucy5odG1sDQogKi8KCnZhciBtdXRhdGlvbnMgPSB7CiAgVVNFUl9SRVFVRVNUOiBmdW5jdGlvbiBVU0VSX1JFUVVFU1Qoc3RhdGUpIHsKICAgIHN0YXRlLnN0YXR1cyA9ICdsb2FkaW5nJzsKICB9LAogIFVTRVJfU1VDQ0VTUzogZnVuY3Rpb24gVVNFUl9TVUNDRVNTKHN0YXRlKSB7CiAgICBzdGF0ZS5zdGF0dXMgPSAnc3VjY2Vzcyc7CiAgICBzdGF0ZS5wcm9maWxlLnBhc3N3b3JkID0gJyc7CiAgfSwKICBVU0VSX0RBVEE6IGZ1bmN0aW9uIFVTRVJfREFUQShzdGF0ZSwgcGF5bG9hZCkgewogICAgc3RhdGUucHJvZmlsZS51c2VySWQgPSBwYXlsb2FkLmlkOwogICAgc3RhdGUucHJvZmlsZS5lbWFpbCA9IHBheWxvYWQuZW1haWw7CiAgfSwKICBVU0VSX0xPR09VVDogZnVuY3Rpb24gVVNFUl9MT0dPVVQoc3RhdGUpIHsKICAgIHN0YXRlLnByb2ZpbGUgPSB7CiAgICAgIHVzZXJJZDogJycsCiAgICAgIGVtYWlsOiAnJywKICAgICAgcGFzc3dvcmQ6ICcnCiAgICB9OwogIH0sCiAgVVNFUl9FUlJPUjogZnVuY3Rpb24gVVNFUl9FUlJPUihzdGF0ZSkgewogICAgc3RhdGUuc3RhdHVzID0gJ2Vycm9yJzsKICB9LAogIFVTRVJfRk9STTogZnVuY3Rpb24gVVNFUl9GT1JNKHN0YXRlLCBwYXlsb2FkKSB7CiAgICBzdGF0ZS5wcm9maWxlW3BheWxvYWQua2V5XSA9IHBheWxvYWQudmFsdWU7CiAgfSwKICBVU0VSX1NUQVRJU1RJQ1M6IGZ1bmN0aW9uIFVTRVJfU1RBVElTVElDUyhzdGF0ZSwgc3RhdGlzdGljcykgewogICAgc3RhdGUuc3RhdGlzdGljcyA9IHN0YXRpc3RpY3M7CiAgfSwKICBVU0VSX1NFVFRJTkdTOiBmdW5jdGlvbiBVU0VSX1NFVFRJTkdTKHN0YXRlLCBzZXR0aW5ncykgewogICAgc3RhdGUuc2V0dGluZ3MgPSBzZXR0aW5nczsKICB9Cn07Ci8qKg0KICogSW5zdHJ1Y3Rpb25zIGZvciB3b3JraW5nIHdpdGggZ2V0dGVycw0KICogbGluayBodHRwczovL3Z1ZXgudnVlanMub3JnL2FwaS8jZ2V0dGVycw0KICovCgp2YXIgZ2V0dGVycyA9IHsKICBnZXRQcm9maWxlOiBmdW5jdGlvbiBnZXRQcm9maWxlKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUucHJvZmlsZTsKICB9LAogIGlzUHJvZmlsZUxvYWRlZDogZnVuY3Rpb24gaXNQcm9maWxlTG9hZGVkKHN0YXRlKSB7CiAgICByZXR1cm4gISFzdGF0ZS5wcm9maWxlLm5hbWU7CiAgfSwKICBpc0xvYWRpbmc6IGZ1bmN0aW9uIGlzTG9hZGluZyhzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLnN0YXR1cyA9PT0gJ2xvYWRpbmcnOwogIH0sCiAgZ2V0U3RhdGlzdGljczogZnVuY3Rpb24gZ2V0U3RhdGlzdGljcyhzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLnN0YXRpc3RpY3M7CiAgfSwKICBnZXRTZXR0aW5nOiBmdW5jdGlvbiBnZXRTZXR0aW5nKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUuc2V0dGluZ3M7CiAgfQp9Owp2YXIgc3RhdGUgPSB7CiAgc3RhdHVzOiAnJywKICBwcm9maWxlOiB7CiAgICB1c2VySWQ6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VySWQnKSwKICAgIGVtYWlsOiAnJywKICAgIHBhc3N3b3JkOiAnJwogIH0sCiAgc3RhdGlzdGljczogewogICAgbGVhcm5lZFdvcmRzOiA1MDAsCiAgICBvcHRpb25hbDoge30KICB9LAogIHNldHRpbmdzOiB7CiAgICB3b3Jkc1BlckRheTogMCwKICAgIG9wdGlvbmFsOiB7fQogIH0KfTsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWVzcGFjZWQ6IHRydWUsCiAgc3RhdGU6IHN0YXRlLAogIGdldHRlcnM6IGdldHRlcnMsCiAgYWN0aW9uczogYWN0aW9ucywKICBtdXRhdGlvbnM6IG11dGF0aW9ucwp9Ow=="},null]}