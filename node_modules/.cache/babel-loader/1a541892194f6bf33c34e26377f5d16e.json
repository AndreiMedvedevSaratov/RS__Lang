{"remainingRequest":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\thread-loader\\dist\\cjs.js!F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\babel-loader\\lib\\index.js!F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\vuetify-loader\\lib\\loader.js??ref--18-0!F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\RS\\Repositaries\\RS-Lang\\rslang\\src\\components\\english-puzzle.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\src\\components\\english-puzzle.vue","mtime":1594840978197},{"path":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}