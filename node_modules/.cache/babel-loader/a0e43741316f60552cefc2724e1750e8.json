{"remainingRequest":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\thread-loader\\dist\\cjs.js!F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\babel-loader\\lib\\index.js!F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\eslint-loader\\index.js??ref--12-0!F:\\RS\\Repositaries\\RS-Lang\\rslang\\src\\store\\app.js","dependencies":[{"path":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\src\\store\\app.js","mtime":1594581309216},{"path":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\RS\\Repositaries\\RS-Lang\\rslang\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}